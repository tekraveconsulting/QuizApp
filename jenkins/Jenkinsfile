def AnsibleDeploy(){
    sh 'touch hosts.ini && echo ${hosts_ini} | base64 --decode > hosts.ini'
    sh 'ANSIBLE_HOST_KEY_CHECKING=false ansible-playbook -i hosts.ini ansible/playbook.yml'
}

pipeline {
    
    environment {
        IMG_TAG="${sh(script: 'echo \$GIT_COMMIT | cut -c -7 | tr -d \'[:space:]\' ', returnStdout: true ) }.$BUILD_ID"
        APP_NAME="quizapp"
        APP_LOGS="/data/quizapp"
    }
    agent any
    //agent {
    //    dockerfile {
    //        dir 'jenkins'
    //    }
    //}
    stages {
        //stage('Clone Repository') {
        //    steps {
        //        git url: 'https://github.com/tekraveconsulting/quizapp.git', credentialsId: 'gitHubToken'
        //    }
        //}
        stage('Check') {
            steps {
                sh 'ls && pwd'
            }
        }
        stage('Build') {
            steps {
                script {
                    QuizAppImage = docker.build("$APP_NAME:$IMG_TAG", ".")
                }
            }
        }
        stage('Inject environment Variables') {
            parallel{
                stage('to dev') {
                    when { branch 'dev' }
                    steps {
                        withCredentials([file(credentialsId: 'quizapp-dev', variable: 'PIPELINE_ENV')]) { load "$PIPELINE_ENV"}
                        sh 'echo pwd'
                    }
                }

                stage('master'){
                    when {branch 'master'}
                    steps{
                        withCredentials([file(credentialsId: 'quizapp-master', variable: 'PIPELINE_ENV')]) { load "$PIPELINE_ENV"}
                        sh 'echo pwd'
                    }
                }
            }
        }
        stage('Publish and Deploy') {
            when {
                anyOf {
                    branch 'master'
                    branch 'dev'
                }
            }
            steps {
                script {
                    switch(BRANCH_NAME) {
                      case ["master", "dev"]:  // Deployment steps for Master and Dev
                        env.DOCKER_REGISTRY        = "https://192.168.0.120:4443"
                        env.DOCKER_REGISTRY_HOST   = "192.168.0.120:4443"
                        env.DOCKER_REGISTRY_SECRET = "DockerRegistry"

                        docker.withRegistry('https://192.168.0.120:4443', 'DockerRegistry') {
                            QuizAppImage.push()
                        }

                        withCredentials([usernamePassword(credentialsId: 'DockerRegistry', passwordVariable: 'REGISTRY_PASS', usernameVariable: 'REGISTRY_USER')]) {
                            AnsibleDeploy()
                        }
                        break
                }
            }
        }
     }
        //stage('Deploy to Artifactory') {
        //    steps {
        //        withCredentials([usernamePassword(credentialsId: 'your-artifactory-credentials-id', passwordVariable: 'ARTIFACTORY_PASSWORD', usernameVariable: 'ARTIFACTORY_USERNAME')]) {
        //            sh "curl -u $ARTIFACTORY_USERNAME:$ARTIFACTORY_PASSWORD -X PUT 'http://your-artifactory-url/your-repo/your-package-name-version.tar.gz' -T dist/*"
        //        }
        //    }
        //}
        //stage('Deploy to Docker') {
        //    steps {
        //        withCredentials([usernamePassword(credentialsId: 'your-docker-credentials-id', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
        //            sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
        //            sh 'docker build -t your-docker-username/your-image-name:latest .'
        //            sh 'docker push your-docker-username/your-image-name:latest'
        //        }
        //    }
        //}
        //stage('Deploy to Server') {
        //    steps {
        //        withCredentials([sshUserPrivateKey(credentialsId: 'your-ssh-key-id', keyFileVariable: 'SSH_KEY_FILE', usernameVariable: 'SSH_USER')]) {
        //            sh "ansible-playbook -i 'your-server-ip,' deploy.yml -u $SSH_USER --private-key=$SSH_KEY_FILE"
        //        }
        //    }
        //}
    }
}
